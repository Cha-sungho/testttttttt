/*
 * app_ctrl_power.c
 *
 *  Created on: 2022. 1. 5.
 *      Author: JOO
 */

#include "f28x_project.h"
#include "driverlib.h"
#include "device.h"

#include "app_ctrl_dcdc.h"

#include "app_comm.h"
#include "app_sense.h"
#include "app_op.h"
#include "app_settings.h"

#include "app_ctrl_power.h"
#include "bsp_io.h"
#include "drv_pwm.h"
#include "drv_timer.h"

#include "app_safety.h"
#include "app_calibration.h"

#ifdef CPU1
#ifdef _FLASH
#pragma CODE_SECTION(app_CtrlPower, ".TI.ramfunc");
#endif
#endif

///////// BUCK Control Part /////////
float V_BUCK_ref = 0.;
float Err_BUCK_V = 0., Up_BUCK_V = 0., Ui_BUCK_V = 0., Kp_BUCK_V = 6.25, Ki_BUCK_V = 10000., Ka_BUCK_V = 0.16;  //Kp_BUCK_V = 6.25, Ki_BUCK_V = 10000., Ka_BUCK_V = 0.16;                                     Kp_BUCK_V = 0.01/5, Ki_BUCK_V = 100./20000, Ka_BUCK_V = 100/0.2
float Kp_BUCK_V_PRE = 3.25, Ki_BUCK_V_PRE = 5000;
float I_BUCK_ref = 0., I_BUCK_ref_1 = 0., I_BUCK_ref_2 = 0.;
float Err_BUCK_I_1 = 0., Up_BUCK_I_1 = 0., Ui_BUCK_I_1 = 0., Kp_BUCK_I_1 = 0.0005, Ki_BUCK_I_1 = 1., Ka_BUCK_I = 2000., D_BUCK_1 = 0.;  //Kp_BUCK_I_1 = 0.0005, Ki_BUCK_I_1 = 5., Ka_BUCK_I=2000.
float Ki_BUCK_I_1_PRE = 1., Kp_BUCK_I_1_PRE = 0.0005, Ka_BUCK_I_PRE = 2000;
float Err_BUCK_I_2 = 0., Up_BUCK_I_2 = 0., Ui_BUCK_I_2 = 0., D_BUCK_2 = 0.;
float I_BUCK_comp = 0., I_BUCK_comp2 = 0.;
float D_BUCK_1_comp = 0., D_BUCK_1_comp2 = 0., D_BUCK_2_comp = 0., D_BUCK_2_comp2 = 0.;
float ANTI_BUCK_V = 0.;
float ANTI_BUCK_I_1 = 0., ANTI_BUCK_I_2 = 0.;

//float Del_t = 0.00002347;  // Sampling Time(42.6kHz)
float Del_t = ((float)DSP_TIMER0_TIME * 1.e-6);  // 0.000032 Sampling Time(31.25kHz)

/////////////////////////////////////////////////////////
extern float sense_batt_v_emavg;
extern float sense_dc_bb1_i_emavg;
extern float sense_dc_bb2_i_emavg;
extern float sense_dc_out_cap_v_emavg;

extern float sense_batt_v;
extern float sense_dc_bb1_i;
extern float sense_dc_bb2_i;
extern float sense_dc_out_cap_v;

extern uint16_t fault;

float voltage_ref = 0;
float current_ref = 0;
float g_debug_target_voltage = 3.5;
float g_debug_target_current = 0.1;

uint16_t g_debug_start_flag = 0;
uint16_t cv_mode = 0;

c_d_mode charge_discharge_mode = charge_mode;

Uint16 controlseqeunse_cnt = 0;
extern float set_pu_dc_link_pri_volts;
Uint16 controlseqeunse_cnt_new = 0;
extern AppCommCanOpHandle operation;
extern float sense_dc_link_pri_f_v_emavg;

float cv_voltage_margin = 0.0015; //

Uint16 *cnt_control;
Uint16 controlseqeunse_cnt1 = 0;
Uint16 controlseqeunse_cnt2 = 0;
Uint16 pre_cnt = 10;
extern float set_calc_output_current_max;

typedef enum
{
    power_seq_stop = 0,
    power_seq_input_on_req,
    power_seq_input_ongoing,
    power_seq_output_on_req,
    power_seq_output_ongoing,
    power_seq_cha_dis
} appCtrlPowerSeq;


appCtrlPowerSeq app_ctrl_power_seq;

appCtrlDCDCSeq app_ctrl_dcdc_seq;

appFormationSeq seq_mode = no_operation;
appFormationSeq seq_mode_old = no_operation;
Uint16 precharge_end_cnt = 0;
float target_voltage_percent = 0.95;
float increase_current = 0.001;

#if(CURRENT_CALIBRATION_TEST == 0)
float start_current = 2.0;
#else
float start_current = 4.0;  // After calibration
#endif
Uint16 target_time = 1;
Uint16 charge_cv_voltage_check_time = 100;
Uint16 discharge_cv_voltage_check_time = 100;
Uint16 discharge_cv_cnt = 0;
float dischar_volt = 0.0;
float char_volt = 0.0;
float increase_vol_value = 0.001;
Uint16 precharge_first_in_flag = 0;

void app_CtrlPower(void)
{
//    bsp_IoChMux1TP(1);
//    bsp_IoRunLED(1);

    app_ConvDataDspAdcMain();
    app_controlseqeunse();



    if (seq_mode == output_precharge )
    {
        buck_boost_control_precharge(voltage_ref, current_ref);
    }
    else if (seq_mode == operation_control
            || seq_mode == output_precharge_end
            || seq_mode == control_idle)
    {
        buck_boost_control(charge_discharge_mode, voltage_ref, current_ref);
    }

//    bsp_IoChMux1TP(0);
//    bsp_IoRunLED(0);
#if(DEBUGGING == 1)
    else if (seq_mode >= output_mosfet_on && seq_mode <= basic_charge)
    {
        buck_boost_control(charge_discharge_mode, voltage_ref, current_ref);
    }

    if(g_debug_test_flag == 1) {            // 듀티 테스트용
        drv_SetDCDCPWMDuty(g_debug_test_CMPA, g_debug_test_CMPA, 1);      // HR_PWM
        drv_EnablePWM();
    }
    if(g_debug_test_flag == 2) {            // 듀티 테스트용
        bsp_IoEnableOut(1); 				// Secondary MOSFET On
    }
#endif
}

Uint16 debug_cnt2 = 0;
Uint16 cv_bug_flag1 = 0;
Uint16 cv_bug_flag2 = 0;
void app_controlseqeunse(void)
{
//    if (fault) operation.op.state = op_None;

    switch (seq_mode)
    {

    case output_precharge:
//        if ((sense_dc_out_cap_v_emavg >= (sense_batt_v_emavg * 0.95) ))
        if ((sense_dc_out_cap_v_emavg >= (sense_batt_v_emavg * target_voltage_percent) ))
        {
            debug_cnt2=0;
//            current_ref = 0.001;
            current_ref = increase_current;
            precharge_end_cnt++;
            if(precharge_end_cnt >= CONTROL_SEQUENCE_MS_COUNT(target_time))
            {
                seq_mode = output_precharge_end;
            }
        }
        else
        {
            debug_cnt2=1;
            voltage_ref = sense_batt_v_emavg - 0.005;
//            voltage_ref = 3.4;
//            current_ref = 1.0;        // 1A
            current_ref = start_current;
            precharge_end_cnt = 0;
            drv_EnablePWM();
        }

        break;
    case output_precharge_end:

        operation.op.power_stage.bat_connect_complete_flag = TRUE;
        bsp_sec_mosfet(1);  // Secondary MOSFET On
        //                operation.op.bat_connect_complete_flag = TRUE;

        voltage_ref = sense_batt_v_emavg;
        //            current_ref = 1.0;
        current_ref = 0.0;
//        drv_DisablePWM();


        break;
    case control_idle:

        charge_discharge_mode = idle;
        voltage_ref = sense_batt_v_emavg;
        //            current_ref = 1.0;
        current_ref = 0.0;
        operation.op.cv_mode_flag = FALSE;
        cv_bug_flag1++;
//        drv_SetDCDCPWMDuty(D_BUCK_1, D_BUCK_2, 1);



        break;
    case operation_control:
//        drv_EnablePWM();
        //        voltage_ref = ((float)operation.rx.vol / 1000.0f);
        //        current_ref = ((float)operation.rx.curr / 1000.0f);
        //        if(operation.rx.cmd == can_rx_cmd_cha)
        //        {
        ////            cnt_control[1]++;
        //            charge_discharge_mode = charge_mode;
        //            //            voltage_ref = ((float)operation.rx.vol / 1000.0f);
        //            //            current_ref = ((float)operation.rx.curr / 1000.0f);
        //        }
        //        else if(operation.rx.cmd == can_rx_cmd_dis)
        //        {
        ////            cnt_control[2]++;
        //            charge_discharge_mode = discharge_mode;
        //            //            voltage_ref = ((float)operation.rx.vol / 1000.0f);
        //            //            current_ref = ((float)operation.rx.curr / 1000.0f);
        //        }
        // CV 판단 함수
        if(operation.rx.op==can_rx_op_cha_cv || operation.rx.op==can_rx_op_dis_cv)
        {
            appCvModeCheck(operation.rx.vol, cv_voltage_margin);
        }
        else
        {
            operation.op.cv_mode_flag=FALSE;
            cv_bug_flag2++;
        }
        break;

#if(DEBUGGING == 1)
    case basic_discharge:  //방전 기본 동작
        charge_discharge_mode = 0;     // Discharge;
        voltage_ref = g_debug_target_voltage;        //
        current_ref = g_debug_target_current;        //
        break;

    case basic_charge:  //충전 기본 동작
        charge_discharge_mode = 1;     // Charge;
        voltage_ref = g_debug_target_voltage;        //
        current_ref = g_debug_target_current;        //
        break;
#endif
    default:
        //        charge_discharge_mode = idle;
        break;
    }

}

Uint16 g_cha_cv_cnt = 0;
Uint16 g_dis_cv_cnt = 0;
float g_dis_volatge = 0.0;
float g_cha_volatge = 0.0;
float g_dis_volt = 0.0;
float g_char_volt = 0.0;

void appCvModeCheck(uint32_t voltage, float margin)
{
    static Uint16 cv_cnt = 0;
    static Uint16 cv_fault_cnt = 0;

    if(charge_discharge_mode == charge_mode)
    {
        char_volt = ((float)voltage / 1000.0) - margin;
        if(sense_batt_v_emavg >= char_volt)
        {
            cv_cnt++;
            g_cha_cv_cnt++;          
            g_char_volt = char_volt;
            if(cv_cnt >= charge_cv_voltage_check_time)
            {
                g_cha_volatge = sense_batt_v_emavg;
                operation.op.cv_mode_flag = TRUE;
                cv_cnt = 0;
                g_cha_cv_cnt = 0;
            }
        }
//        else cv_cnt = 0;
    }
    else if(charge_discharge_mode == discharge_mode)
    {
        dischar_volt = ((float)voltage / 1000.0) + margin;
        if(sense_batt_v_emavg <= dischar_volt)
        {
            discharge_cv_cnt++;
            cv_cnt++;
            g_dis_cv_cnt++;
            g_dis_volt = dischar_volt;
            if(cv_cnt >= discharge_cv_voltage_check_time)
            {
				g_dis_volatge = sense_batt_v_emavg;
                operation.op.cv_mode_flag = TRUE;
                cv_cnt = 0;
                g_dis_cv_cnt = 0;
            }
        }
//        else cv_cnt = 0;
    }
}

#if 0
Uint16 appCvAlarmCheck(AppCommCanOpHandle *oper)
{
    static charge_vol_cnt = 0;
    static charge_cur_cnt = 0;
    static discharge_cc_cnt = 0;
    static discharge_cv_cnt = 0;

    if((operation.rx.op==can_rx_op_cha_cc) || (operation.rx.op==can_rx_op_cha_cv))
    {
        // Current
        //        if(calc_dc_out_i_emavg >= set_calc_output_current_max)       // 110A
        if(calc_dc_out_i_emavg >= 60.0)       // 60A for Test
        {
            charge_cur_cnt++;
            if(charge_cur_cnt >= 100)      // 32ms
            {
                // 알람
            }
            else
            {
                charge_cur_cnt = 0;
            }
        }
        // Voltage
        if(sense_batt_v_emavg >= set_calc_battary_volts_max)        // 5.0V
        {
            charge_vol_cnt++;
            if(charge_vol_cnt >= 100)        // 32ms =
            {
                // 알람
            }
            else
            {
                charge_vol_cnt = 0;
            }
        }
    }

    else if(operation.rx.op==can_rx_op_cha_cv)
    {

    }
    else if(operation.rx.op==can_rx_op_dis_cc)
    {
        if(calc_dc_out_i_emavg <= (-1.0) * set_calc_output_current_max)     // 110A
        {

        }
        if(sense_batt_v_emavg >= set_pu_battary_volts_min)                  // 1.0V
        {

        }
    }
    else if(operation.rx.op==can_rx_op_dis_cv)
    {

    }
    return 1;
}
#endif

void buck_boost_control(c_d_mode char_dischar, float vol_ref, float cur_ref)
{
    if(vol_ref>= 5.5) vol_ref = 5.5;
    if(cur_ref>= 105.0) cur_ref = 105.0;


    if ((char_dischar == idle) || (char_dischar == charge_mode)) {
        //////////////////// Voltage Control ////////////////////


        V_BUCK_ref += 0.001;     // 5V = 0.001
//        V_BUCK_ref += 0.0001;     // 5V = 0.001

        //        if (V_BUCK_ref >= 5) V_BUCK_ref = 5;
        if (V_BUCK_ref >= vol_ref) V_BUCK_ref = vol_ref;

/*
        if (cv_mode == 1) {
//            Err_BUCK_V = V_BUCK_ref - sense_batt_v_cal;
            Err_BUCK_V = V_BUCK_ref - sense_batt_v;
//        } else Err_BUCK_V = V_BUCK_ref - sense_dc_out_cap_v_cal;
        } else Err_BUCK_V = V_BUCK_ref - sense_dc_out_cap_v;
*/
		Err_BUCK_V = V_BUCK_ref - sense_batt_v_emavg;

        Up_BUCK_V = Kp_BUCK_V * Err_BUCK_V;
        Ui_BUCK_V = Ui_BUCK_V + Ki_BUCK_V * (Err_BUCK_V - ANTI_BUCK_V * Ka_BUCK_V) * Del_t;

        I_BUCK_comp = Up_BUCK_V + Ui_BUCK_V;
        //        I_BUCK_comp2 = (I_BUCK_comp <= 0) ? 0. : (I_BUCK_comp >= 140) ? 140 : I_BUCK_comp;  // Limit : 140
        I_BUCK_comp2 = (I_BUCK_comp <= 0) ? 0. : (I_BUCK_comp >= cur_ref) ? cur_ref : I_BUCK_comp;  // 충전 기준 양의 출력 제한

        ANTI_BUCK_V = I_BUCK_comp - I_BUCK_comp2;
        I_BUCK_ref = I_BUCK_comp2;

        //////////////////// Current Control ////////////////////
#if (CURRENT_CALIBRATION_TEST != 1)
        I_BUCK_ref_1 = I_BUCK_ref / 2;
        I_BUCK_ref_2 = I_BUCK_ref / 2;
#else
//        I_BUCK_ref_1 = I_BUCK_ref;
//        I_BUCK_ref_2 = I_BUCK_ref;
        I_BUCK_ref_1 = I_BUCK_ref / 2;
        I_BUCK_ref_2 = I_BUCK_ref / 2;
#endif

        Err_BUCK_I_1 = I_BUCK_ref_1 - sense_dc_bb1_i_emavg;
//        Err_BUCK_I_1 = I_BUCK_ref_1 - sense_dc_bb1_i;

        Up_BUCK_I_1 = Kp_BUCK_I_1 * Err_BUCK_I_1;
        Ui_BUCK_I_1 = Ui_BUCK_I_1 + Ki_BUCK_I_1 * (Err_BUCK_I_1 - ANTI_BUCK_I_1 * Ka_BUCK_I) * Del_t;

        D_BUCK_1_comp = Up_BUCK_I_1 + Ui_BUCK_I_1;
        D_BUCK_1_comp2 = (D_BUCK_1_comp <= 0) ? 0. : (D_BUCK_1_comp >= 0.9) ? 0.9 : D_BUCK_1_comp;

        ANTI_BUCK_I_1 = D_BUCK_1_comp - D_BUCK_1_comp2;
        D_BUCK_1 = D_BUCK_1_comp2;

        Err_BUCK_I_2 = I_BUCK_ref_2 - sense_dc_bb2_i_emavg;

        Up_BUCK_I_2 = Kp_BUCK_I_1 * Err_BUCK_I_2;
        Ui_BUCK_I_2 = Ui_BUCK_I_2 + Ki_BUCK_I_1 * (Err_BUCK_I_2 - ANTI_BUCK_I_2 * Ka_BUCK_I) * Del_t;

        D_BUCK_2_comp = Up_BUCK_I_2 + Ui_BUCK_I_2;
        D_BUCK_2_comp2 = (D_BUCK_2_comp <= 0) ? 0. : (D_BUCK_2_comp >= 0.9) ? 0.9 : D_BUCK_2_comp;

        ANTI_BUCK_I_2 = D_BUCK_2_comp - D_BUCK_2_comp2;
        D_BUCK_2 = D_BUCK_2_comp2;
        //////////////////////////////////////////////////////////////////////////////////
#if (CURRENT_CALIBRATION_TEST != 1)
        Err_BUCK_I_2 = I_BUCK_ref_2 - sense_dc_bb2_i_cal;
//        Err_BUCK_I_2 = I_BUCK_ref_2 - sense_dc_bb2_i;

        Up_BUCK_I_2 = Kp_BUCK_I_1 * Err_BUCK_I_2;
        Ui_BUCK_I_2 = Ui_BUCK_I_2 + Ki_BUCK_I_1 * (Err_BUCK_I_2 - ANTI_BUCK_I_2 * Ka_BUCK_I) * Del_t;

        D_BUCK_2_comp = Up_BUCK_I_2 + Ui_BUCK_I_2;
        D_BUCK_2_comp2 = (D_BUCK_2_comp <= 0) ? 0. : (D_BUCK_2_comp >= 0.9) ? 0.9 : D_BUCK_2_comp;

        ANTI_BUCK_I_2 = D_BUCK_2_comp - D_BUCK_2_comp2;
        D_BUCK_2 = D_BUCK_2_comp2;

        //        EPwm1Regs.CMPA.bit.CMPA = EPwm1Regs.TBPRD * D_BUCK_1;
        //        EPwm2Regs.CMPA.bit.CMPA = EPwm2Regs.TBPRD * D_BUCK_2;
        drv_SetDCDCPWMDuty(D_BUCK_1, D_BUCK_2, 1);      // HR_PWM
#else
//        drv_SetBB1PWMDuty(D_BUCK_1, 1);
//        drv_SetBB2PWMDuty(D_BUCK_2, 1);
        drv_SetDCDCPWMDuty(D_BUCK_1, D_BUCK_2, 1);      // HR_PWM
#endif
    }
    else   // char_dischar = 1;
    {
        if (cv_mode == 0) {
            //            I_BUCK_ref = -100 ; //CC Control
            I_BUCK_ref = (-1.0) * (cur_ref);  //CC Control
        } else {
            //////////////////// Voltage Control ////////////////////

            V_BUCK_ref -= 0.001;
            //        V_BUCK_ref += 0.0002;

            //        if (V_BUCK_ref >= 5) V_BUCK_ref = 5;
            if (V_BUCK_ref <= vol_ref) V_BUCK_ref = vol_ref;

            Err_BUCK_V = -V_BUCK_ref + sense_batt_v_emavg;

            Up_BUCK_V = Kp_BUCK_V * Err_BUCK_V;
            Ui_BUCK_V = Ui_BUCK_V + Ki_BUCK_V * (Err_BUCK_V - ANTI_BUCK_V * Ka_BUCK_V) * Del_t;

            I_BUCK_comp = Up_BUCK_V + Ui_BUCK_V;
            //        I_BUCK_comp2 = (I_BUCK_comp <= 0) ? 0. : (I_BUCK_comp >= 140) ? 140 : I_BUCK_comp;  // Limit : 140
            I_BUCK_comp2 = (I_BUCK_comp <= 0) ? 0. : (I_BUCK_comp >= cur_ref) ? cur_ref : I_BUCK_comp;  // 충전 기준 양의 출력 제한

            ANTI_BUCK_V = I_BUCK_comp - I_BUCK_comp2;
            I_BUCK_ref = I_BUCK_comp2;
            I_BUCK_ref = (-1.0) * I_BUCK_ref;
        }
        //////////////////// Current Control ////////////////////
#if (CURRENT_CALIBRATION_TEST != 1)
        I_BUCK_ref_1 = I_BUCK_ref / 2;
        I_BUCK_ref_2 = I_BUCK_ref / 2;
#else
//        I_BUCK_ref_1 = I_BUCK_ref;
//        I_BUCK_ref_2 = I_BUCK_ref;
        I_BUCK_ref_1 = I_BUCK_ref / 2;
        I_BUCK_ref_2 = I_BUCK_ref / 2;
#endif

        Err_BUCK_I_1 = I_BUCK_ref_1 - sense_dc_bb1_i_emavg;

        Up_BUCK_I_1 = Kp_BUCK_I_1 * Err_BUCK_I_1;
        Ui_BUCK_I_1 = Ui_BUCK_I_1 + Ki_BUCK_I_1 * (Err_BUCK_I_1 - ANTI_BUCK_I_1 * Ka_BUCK_I) * Del_t;

        D_BUCK_1_comp = Up_BUCK_I_1 + Ui_BUCK_I_1;
        D_BUCK_1_comp2 = (D_BUCK_1_comp <= -0.9) ? -0.9 : (D_BUCK_1_comp >= 0.9) ? 0.9 : D_BUCK_1_comp;

        ANTI_BUCK_I_1 = D_BUCK_1_comp - D_BUCK_1_comp2;

        if (D_BUCK_1_comp >= 0.0) {
            D_BUCK_1 = D_BUCK_1_comp2;
        } else {
            D_BUCK_1 = 1 + D_BUCK_1_comp2;
        }

        Err_BUCK_I_2 = I_BUCK_ref_2 - sense_dc_bb2_i_emavg;

        Up_BUCK_I_2 = Kp_BUCK_I_1 * Err_BUCK_I_2;
        Ui_BUCK_I_2 = Ui_BUCK_I_2 + Ki_BUCK_I_1 * (Err_BUCK_I_2 - ANTI_BUCK_I_2 * Ka_BUCK_I) * Del_t;

        D_BUCK_2_comp = Up_BUCK_I_2 + Ui_BUCK_I_2;
        D_BUCK_2_comp2 = (D_BUCK_2_comp <= -0.9) ? -0.9 : (D_BUCK_2_comp >= 0.9) ? 0.9 : D_BUCK_2_comp;

        ANTI_BUCK_I_2 = D_BUCK_2_comp - D_BUCK_2_comp2;

        if (D_BUCK_2_comp2 >= 0.0) {
            D_BUCK_2 = D_BUCK_2_comp2;
        } else {
            D_BUCK_2 = 1 + D_BUCK_2_comp2;
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////
#if (CURRENT_CALIBRATION_TEST != 1)
        Err_BUCK_I_2 = I_BUCK_ref_2 - sense_dc_bb2_i_cal;

        Up_BUCK_I_2 = Kp_BUCK_I_1 * Err_BUCK_I_2;
        Ui_BUCK_I_2 = Ui_BUCK_I_2 + Ki_BUCK_I_1 * (Err_BUCK_I_2 - ANTI_BUCK_I_2 * Ka_BUCK_I) * Del_t;

        D_BUCK_2_comp = Up_BUCK_I_2 + Ui_BUCK_I_2;
        D_BUCK_2_comp2 = (D_BUCK_2_comp <= -0.9) ? -0.9 : (D_BUCK_2_comp >= 0.9) ? 0.9 : D_BUCK_2_comp;

        ANTI_BUCK_I_2 = D_BUCK_2_comp - D_BUCK_2_comp2;

        if (D_BUCK_2_comp2 >= 0.0) {
            D_BUCK_2 = D_BUCK_2_comp2;
        } else {
            D_BUCK_2 = 1 + D_BUCK_2_comp2;
        }

        //        EPwm1Regs.CMPA.bit.CMPA = EPwm1Regs.TBPRD * D_BUCK_1;
        //        EPwm2Regs.CMPA.bit.CMPA = EPwm2Regs.TBPRD * D_BUCK_2;
        drv_SetDCDCPWMDuty(D_BUCK_1, D_BUCK_2, 1);
#else
//        drv_SetBB1PWMDuty(D_BUCK_1, 1);
//        drv_SetBB2PWMDuty(D_BUCK_2, 1);
        drv_SetDCDCPWMDuty(D_BUCK_1, D_BUCK_2, 1);
#endif
    }
}

void buck_boost_control_precharge(float vol_ref, float cur_ref)
{
    if(vol_ref>= 5.5) vol_ref = 5.5;
    if(cur_ref>= 15.0) cur_ref = 15.0;

    //////////////////// Voltage Control ////////////////////
    pre_cnt++;

//    V_BUCK_ref += 0.001;     // 5V = 0.001
    if(pre_cnt >= 10)
    {
        V_BUCK_ref += increase_vol_value;
        pre_cnt = 0;
    }
    //        V_BUCK_ref += 0.0002;

    //        if (V_BUCK_ref >= 5) V_BUCK_ref = 5;
    if (V_BUCK_ref >= vol_ref) V_BUCK_ref = vol_ref;

    Err_BUCK_V = V_BUCK_ref - sense_dc_out_cap_v_cal;

    Up_BUCK_V = Kp_BUCK_V_PRE * Err_BUCK_V;
    Ui_BUCK_V = Ui_BUCK_V + Ki_BUCK_V_PRE * (Err_BUCK_V - ANTI_BUCK_V * Ka_BUCK_V) * Del_t;

    I_BUCK_comp = Up_BUCK_V + Ui_BUCK_V;
    //        I_BUCK_comp2 = (I_BUCK_comp <= 0) ? 0. : (I_BUCK_comp >= 140) ? 140 : I_BUCK_comp;  // Limit : 140
            I_BUCK_comp2 = (I_BUCK_comp <= 0) ? 0. : (I_BUCK_comp >= cur_ref) ? cur_ref : I_BUCK_comp; // 충전 기준 양의 출력 제한
//    I_BUCK_comp2 = (I_BUCK_comp <= ((-1.0) * cur_ref)) ? ((-1.0) * cur_ref) : (I_BUCK_comp >= cur_ref) ? cur_ref : I_BUCK_comp;

    ANTI_BUCK_V = I_BUCK_comp - I_BUCK_comp2;
    I_BUCK_ref = I_BUCK_comp2;

    //////////////////// Current Control ////////////////////
#if (CURRENT_CALIBRATION_TEST != 1)
    I_BUCK_ref_1 = I_BUCK_ref / 2;
    I_BUCK_ref_2 = I_BUCK_ref / 2;
#else
//    I_BUCK_ref_1 = I_BUCK_ref;
//    I_BUCK_ref_2 = I_BUCK_ref;
    I_BUCK_ref_1 = I_BUCK_ref / 2;
    I_BUCK_ref_2 = I_BUCK_ref / 2;
#endif

    Err_BUCK_I_1 = I_BUCK_ref_1 - sense_dc_bb1_i_emavg;

    Up_BUCK_I_1 = Kp_BUCK_I_1_PRE * Err_BUCK_I_1;
    Ui_BUCK_I_1 = Ui_BUCK_I_1 + Ki_BUCK_I_1_PRE * (Err_BUCK_I_1 - ANTI_BUCK_I_1 * Ka_BUCK_I_PRE) * Del_t;

    D_BUCK_1_comp = Up_BUCK_I_1 + Ui_BUCK_I_1;
    D_BUCK_1_comp2 = (D_BUCK_1_comp <= 0) ? 0. : (D_BUCK_1_comp >= 0.9) ? 0.9 : D_BUCK_1_comp;

    ANTI_BUCK_I_1 = D_BUCK_1_comp - D_BUCK_1_comp2;
    D_BUCK_1 = D_BUCK_1_comp2;

    Err_BUCK_I_2 = I_BUCK_ref_2 - sense_dc_bb2_i_emavg;

    Up_BUCK_I_2 = Kp_BUCK_I_1_PRE * Err_BUCK_I_2;
    Ui_BUCK_I_2 = Ui_BUCK_I_2 + Ki_BUCK_I_1_PRE * (Err_BUCK_I_2 - ANTI_BUCK_I_2 * Ka_BUCK_I_PRE) * Del_t;

    D_BUCK_2_comp = Up_BUCK_I_2 + Ui_BUCK_I_2;
    D_BUCK_2_comp2 = (D_BUCK_2_comp <= 0) ? 0. : (D_BUCK_2_comp >= 0.9) ? 0.9 : D_BUCK_2_comp;

    ANTI_BUCK_I_2 = D_BUCK_2_comp - D_BUCK_2_comp2;
    D_BUCK_2 = D_BUCK_2_comp2;
    //////////////////////////////////////////////////////////////////////////////////
#if (CURRENT_CALIBRATION_TEST != 1)
    Err_BUCK_I_2 = I_BUCK_ref_2 - sense_dc_bb2_i_cal;

    Up_BUCK_I_2 = Kp_BUCK_I_1_PRE * Err_BUCK_I_2;
    Ui_BUCK_I_2 = Ui_BUCK_I_2 + Ki_BUCK_I_1_PRE * (Err_BUCK_I_2 - ANTI_BUCK_I_2 * Ka_BUCK_I_PRE) * Del_t;

    D_BUCK_2_comp = Up_BUCK_I_2 + Ui_BUCK_I_2;
    D_BUCK_2_comp2 = (D_BUCK_2_comp <= 0) ? 0. : (D_BUCK_2_comp >= 0.9) ? 0.9 : D_BUCK_2_comp;

    ANTI_BUCK_I_2 = D_BUCK_2_comp - D_BUCK_2_comp2;
    D_BUCK_2 = D_BUCK_2_comp2;

    //        EPwm1Regs.CMPA.bit.CMPA = EPwm1Regs.TBPRD * D_BUCK_1;
    //        EPwm2Regs.CMPA.bit.CMPA = EPwm2Regs.TBPRD * D_BUCK_2;
    drv_SetDCDCPWMDuty(D_BUCK_1, D_BUCK_2, 1);
#else
//    drv_SetBB1PWMDuty(D_BUCK_1, 1);
//    drv_SetBB2PWMDuty(D_BUCK_2, 1);
    drv_SetDCDCPWMDuty(D_BUCK_1, D_BUCK_2, 1);
#endif
}

void control_value_init(void)
{
    V_BUCK_ref = 0.;
    Err_BUCK_V = 0.;
    Up_BUCK_V = 0.;
    Ui_BUCK_V = 0.;
    Kp_BUCK_V = 6.25;
    Ki_BUCK_V = 10000.;
    Ka_BUCK_V = 0.16;

    I_BUCK_ref = 0.;
    I_BUCK_ref_1 = 0.;
    I_BUCK_ref_2 = 0.;
    Err_BUCK_I_1 = 0.;
    Up_BUCK_I_1 = 0.;
    Ui_BUCK_I_1 = 0.;
    Kp_BUCK_I_1 = 0.0005;
    Ki_BUCK_I_1 = 1.;
    Ka_BUCK_I = 2000.;
    D_BUCK_1 = 0.;
    Err_BUCK_I_2 = 0.;
    Up_BUCK_I_2 = 0.;
    Ui_BUCK_I_2 = 0.;
    D_BUCK_2 = 0.;
    I_BUCK_comp = 0.;
    I_BUCK_comp2 = 0.;
    D_BUCK_1_comp = 0.;
    D_BUCK_1_comp2 = 0.;
    D_BUCK_2_comp = 0.;
    D_BUCK_2_comp2 = 0.;
    ANTI_BUCK_V = 0.;
    ANTI_BUCK_I_1 = 0.;
    ANTI_BUCK_I_2 = 0.;

//    Kp_BUCK_V_PRE = 3.25;
//    Ki_BUCK_V_PRE = 5000;

//    Ki_BUCK_I_1_PRE = 0.8;
//    Kp_BUCK_I_1_PRE = 0.0001;
//    Ka_BUCK_I_PRE = 10000;
    pre_cnt = 10;
    char_volt = 0;
    dischar_volt = 0;
}
